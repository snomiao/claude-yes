name: Build and Release

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    name: Build claude-yes binary
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary_name: claude-yes-linux-x64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            binary_name: claude-yes-linux-arm64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary_name: claude-yes-windows-x64.exe
          - os: windows-latest
            target: aarch64-pc-windows-msvc
            binary_name: claude-yes-windows-arm64.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            binary_name: claude-yes-macos-x64
          - os: macos-latest
            target: aarch64-apple-darwin
            binary_name: claude-yes-macos-arm64

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
          components: rustfmt, clippy

      - name: Cache cargo
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Install cross-compilation tools
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Check formatting (Rust)
        if: matrix.os == 'ubuntu-latest' && matrix.target == 'x86_64-unknown-linux-gnu'
        run: cargo fmt -- --check

      - name: Run clippy (Rust)
        if: matrix.os == 'ubuntu-latest' && matrix.target == 'x86_64-unknown-linux-gnu'
        run: cargo clippy -- -D warnings

      - name: Run tests (Rust)
        if: matrix.os == 'ubuntu-latest' && matrix.target == 'x86_64-unknown-linux-gnu'
        run: cargo test

      - name: Build binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Prepare binary
        shell: bash
        run: |
          mkdir -p release
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            cp target/${{ matrix.target }}/release/claude-yes.exe release/${{ matrix.binary_name }}
          else
            cp target/${{ matrix.target }}/release/claude-yes release/${{ matrix.binary_name }}
            chmod +x release/${{ matrix.binary_name }}
          fi

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.binary_name }}
          path: release/${{ matrix.binary_name }}

  release:
    name: Semantic Release
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' && github.repository_owner == 'snomiao'
    permissions:
      contents: write
      id-token: write
      issues: write
      pull-requests: write
      packages: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - uses: oven-sh/setup-bun@v2
      - run: bun install

      # Build TypeScript/JavaScript versions
      - name: Build TypeScript
        run: |
          if [ -f "tsconfig.json" ]; then
            bun run build:cli || true
            bun run build:bun || true
            bun run build:node || true
          fi

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release

      - name: Flatten artifacts
        run: |
          mkdir -p release-flat
          find release -type f -exec cp {} release-flat/ \;
          ls -la release-flat/
          rm -rf release
          mv release-flat release

      - name: Set execute permissions for binaries
        run: |
          chmod +x release/claude-yes-linux-x64 || true
          chmod +x release/claude-yes-linux-arm64 || true
          chmod +x release/claude-yes-macos-x64 || true
          chmod +x release/claude-yes-macos-arm64 || true
          ls -la release/

      - name: Run semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: bunx semantic-release